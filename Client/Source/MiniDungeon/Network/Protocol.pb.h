// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class CTS_CHAT;
struct CTS_CHATDefaultTypeInternal;
extern CTS_CHATDefaultTypeInternal _CTS_CHAT_default_instance_;
class CTS_CREATE_ROOM;
struct CTS_CREATE_ROOMDefaultTypeInternal;
extern CTS_CREATE_ROOMDefaultTypeInternal _CTS_CREATE_ROOM_default_instance_;
class CTS_ENTER_GAME;
struct CTS_ENTER_GAMEDefaultTypeInternal;
extern CTS_ENTER_GAMEDefaultTypeInternal _CTS_ENTER_GAME_default_instance_;
class CTS_ENTER_LOBBY;
struct CTS_ENTER_LOBBYDefaultTypeInternal;
extern CTS_ENTER_LOBBYDefaultTypeInternal _CTS_ENTER_LOBBY_default_instance_;
class CTS_JOIN_ROOM;
struct CTS_JOIN_ROOMDefaultTypeInternal;
extern CTS_JOIN_ROOMDefaultTypeInternal _CTS_JOIN_ROOM_default_instance_;
class CTS_LEAVE_GAME;
struct CTS_LEAVE_GAMEDefaultTypeInternal;
extern CTS_LEAVE_GAMEDefaultTypeInternal _CTS_LEAVE_GAME_default_instance_;
class CTS_LEAVE_ROOM;
struct CTS_LEAVE_ROOMDefaultTypeInternal;
extern CTS_LEAVE_ROOMDefaultTypeInternal _CTS_LEAVE_ROOM_default_instance_;
class CTS_LOGIN;
struct CTS_LOGINDefaultTypeInternal;
extern CTS_LOGINDefaultTypeInternal _CTS_LOGIN_default_instance_;
class CTS_MOVE;
struct CTS_MOVEDefaultTypeInternal;
extern CTS_MOVEDefaultTypeInternal _CTS_MOVE_default_instance_;
class STC_CHAT;
struct STC_CHATDefaultTypeInternal;
extern STC_CHATDefaultTypeInternal _STC_CHAT_default_instance_;
class STC_CREATE_ROOM;
struct STC_CREATE_ROOMDefaultTypeInternal;
extern STC_CREATE_ROOMDefaultTypeInternal _STC_CREATE_ROOM_default_instance_;
class STC_DESPAWN;
struct STC_DESPAWNDefaultTypeInternal;
extern STC_DESPAWNDefaultTypeInternal _STC_DESPAWN_default_instance_;
class STC_ENTER_GAME;
struct STC_ENTER_GAMEDefaultTypeInternal;
extern STC_ENTER_GAMEDefaultTypeInternal _STC_ENTER_GAME_default_instance_;
class STC_ENTER_LOBBY;
struct STC_ENTER_LOBBYDefaultTypeInternal;
extern STC_ENTER_LOBBYDefaultTypeInternal _STC_ENTER_LOBBY_default_instance_;
class STC_JOIN_ROOM;
struct STC_JOIN_ROOMDefaultTypeInternal;
extern STC_JOIN_ROOMDefaultTypeInternal _STC_JOIN_ROOM_default_instance_;
class STC_LEAVE_GAME;
struct STC_LEAVE_GAMEDefaultTypeInternal;
extern STC_LEAVE_GAMEDefaultTypeInternal _STC_LEAVE_GAME_default_instance_;
class STC_LEAVE_ROOM;
struct STC_LEAVE_ROOMDefaultTypeInternal;
extern STC_LEAVE_ROOMDefaultTypeInternal _STC_LEAVE_ROOM_default_instance_;
class STC_LOGIN;
struct STC_LOGINDefaultTypeInternal;
extern STC_LOGINDefaultTypeInternal _STC_LOGIN_default_instance_;
class STC_MOVE;
struct STC_MOVEDefaultTypeInternal;
extern STC_MOVEDefaultTypeInternal _STC_MOVE_default_instance_;
class STC_SPAWN;
struct STC_SPAWNDefaultTypeInternal;
extern STC_SPAWNDefaultTypeInternal _STC_SPAWN_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CTS_CHAT* Arena::CreateMaybeMessage<::Protocol::CTS_CHAT>(Arena*);
template<> ::Protocol::CTS_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::CTS_CREATE_ROOM>(Arena*);
template<> ::Protocol::CTS_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::CTS_ENTER_GAME>(Arena*);
template<> ::Protocol::CTS_ENTER_LOBBY* Arena::CreateMaybeMessage<::Protocol::CTS_ENTER_LOBBY>(Arena*);
template<> ::Protocol::CTS_JOIN_ROOM* Arena::CreateMaybeMessage<::Protocol::CTS_JOIN_ROOM>(Arena*);
template<> ::Protocol::CTS_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::CTS_LEAVE_GAME>(Arena*);
template<> ::Protocol::CTS_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::CTS_LEAVE_ROOM>(Arena*);
template<> ::Protocol::CTS_LOGIN* Arena::CreateMaybeMessage<::Protocol::CTS_LOGIN>(Arena*);
template<> ::Protocol::CTS_MOVE* Arena::CreateMaybeMessage<::Protocol::CTS_MOVE>(Arena*);
template<> ::Protocol::STC_CHAT* Arena::CreateMaybeMessage<::Protocol::STC_CHAT>(Arena*);
template<> ::Protocol::STC_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::STC_CREATE_ROOM>(Arena*);
template<> ::Protocol::STC_DESPAWN* Arena::CreateMaybeMessage<::Protocol::STC_DESPAWN>(Arena*);
template<> ::Protocol::STC_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::STC_ENTER_GAME>(Arena*);
template<> ::Protocol::STC_ENTER_LOBBY* Arena::CreateMaybeMessage<::Protocol::STC_ENTER_LOBBY>(Arena*);
template<> ::Protocol::STC_JOIN_ROOM* Arena::CreateMaybeMessage<::Protocol::STC_JOIN_ROOM>(Arena*);
template<> ::Protocol::STC_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::STC_LEAVE_GAME>(Arena*);
template<> ::Protocol::STC_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::STC_LEAVE_ROOM>(Arena*);
template<> ::Protocol::STC_LOGIN* Arena::CreateMaybeMessage<::Protocol::STC_LOGIN>(Arena*);
template<> ::Protocol::STC_MOVE* Arena::CreateMaybeMessage<::Protocol::STC_MOVE>(Arena*);
template<> ::Protocol::STC_SPAWN* Arena::CreateMaybeMessage<::Protocol::STC_SPAWN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class CTS_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_LOGIN) */ {
 public:
  inline CTS_LOGIN() : CTS_LOGIN(nullptr) {}
  ~CTS_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR CTS_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_LOGIN(const CTS_LOGIN& from);
  CTS_LOGIN(CTS_LOGIN&& from) noexcept
    : CTS_LOGIN() {
    *this = ::std::move(from);
  }

  inline CTS_LOGIN& operator=(const CTS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_LOGIN& operator=(CTS_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const CTS_LOGIN*>(
               &_CTS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTS_LOGIN& a, CTS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_LOGIN& from) {
    CTS_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_LOGIN";
  }
  protected:
  explicit CTS_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // uint64 player_id = 3;
  void clear_player_id();
  uint64_t player_id() const;
  void set_player_id(uint64_t value);
  private:
  uint64_t _internal_player_id() const;
  void _internal_set_player_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CTS_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
    uint64_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_LOGIN) */ {
 public:
  inline STC_LOGIN() : STC_LOGIN(nullptr) {}
  ~STC_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR STC_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_LOGIN(const STC_LOGIN& from);
  STC_LOGIN(STC_LOGIN&& from) noexcept
    : STC_LOGIN() {
    *this = ::std::move(from);
  }

  inline STC_LOGIN& operator=(const STC_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_LOGIN& operator=(STC_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_LOGIN* internal_default_instance() {
    return reinterpret_cast<const STC_LOGIN*>(
               &_STC_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(STC_LOGIN& a, STC_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_LOGIN& from) {
    STC_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_LOGIN";
  }
  protected:
  explicit STC_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_ENTER_LOBBY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_ENTER_LOBBY) */ {
 public:
  inline CTS_ENTER_LOBBY() : CTS_ENTER_LOBBY(nullptr) {}
  ~CTS_ENTER_LOBBY() override;
  explicit PROTOBUF_CONSTEXPR CTS_ENTER_LOBBY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_ENTER_LOBBY(const CTS_ENTER_LOBBY& from);
  CTS_ENTER_LOBBY(CTS_ENTER_LOBBY&& from) noexcept
    : CTS_ENTER_LOBBY() {
    *this = ::std::move(from);
  }

  inline CTS_ENTER_LOBBY& operator=(const CTS_ENTER_LOBBY& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_ENTER_LOBBY& operator=(CTS_ENTER_LOBBY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_ENTER_LOBBY& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_ENTER_LOBBY* internal_default_instance() {
    return reinterpret_cast<const CTS_ENTER_LOBBY*>(
               &_CTS_ENTER_LOBBY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CTS_ENTER_LOBBY& a, CTS_ENTER_LOBBY& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_ENTER_LOBBY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_ENTER_LOBBY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_ENTER_LOBBY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_ENTER_LOBBY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_ENTER_LOBBY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_ENTER_LOBBY& from) {
    CTS_ENTER_LOBBY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_ENTER_LOBBY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_ENTER_LOBBY";
  }
  protected:
  explicit CTS_ENTER_LOBBY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.CTS_ENTER_LOBBY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_ENTER_LOBBY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_ENTER_LOBBY) */ {
 public:
  inline STC_ENTER_LOBBY() : STC_ENTER_LOBBY(nullptr) {}
  ~STC_ENTER_LOBBY() override;
  explicit PROTOBUF_CONSTEXPR STC_ENTER_LOBBY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_ENTER_LOBBY(const STC_ENTER_LOBBY& from);
  STC_ENTER_LOBBY(STC_ENTER_LOBBY&& from) noexcept
    : STC_ENTER_LOBBY() {
    *this = ::std::move(from);
  }

  inline STC_ENTER_LOBBY& operator=(const STC_ENTER_LOBBY& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_ENTER_LOBBY& operator=(STC_ENTER_LOBBY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_ENTER_LOBBY& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_ENTER_LOBBY* internal_default_instance() {
    return reinterpret_cast<const STC_ENTER_LOBBY*>(
               &_STC_ENTER_LOBBY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(STC_ENTER_LOBBY& a, STC_ENTER_LOBBY& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_ENTER_LOBBY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_ENTER_LOBBY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_ENTER_LOBBY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_ENTER_LOBBY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_ENTER_LOBBY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_ENTER_LOBBY& from) {
    STC_ENTER_LOBBY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_ENTER_LOBBY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_ENTER_LOBBY";
  }
  protected:
  explicit STC_ENTER_LOBBY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 3,
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.RoomInfo rooms = 3;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::Protocol::RoomInfo* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >*
      mutable_rooms();
  private:
  const ::Protocol::RoomInfo& _internal_rooms(int index) const;
  ::Protocol::RoomInfo* _internal_add_rooms();
  public:
  const ::Protocol::RoomInfo& rooms(int index) const;
  ::Protocol::RoomInfo* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >&
      rooms() const;

  // .Protocol.PlayerInfo player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_ENTER_LOBBY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo > rooms_;
    ::Protocol::PlayerInfo* player_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_CREATE_ROOM) */ {
 public:
  inline CTS_CREATE_ROOM() : CTS_CREATE_ROOM(nullptr) {}
  ~CTS_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR CTS_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_CREATE_ROOM(const CTS_CREATE_ROOM& from);
  CTS_CREATE_ROOM(CTS_CREATE_ROOM&& from) noexcept
    : CTS_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline CTS_CREATE_ROOM& operator=(const CTS_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_CREATE_ROOM& operator=(CTS_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const CTS_CREATE_ROOM*>(
               &_CTS_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CTS_CREATE_ROOM& a, CTS_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_CREATE_ROOM& from) {
    CTS_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_CREATE_ROOM";
  }
  protected:
  explicit CTS_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 1,
  };
  // .Protocol.RoomInfo room_info = 1;
  bool has_room_info() const;
  private:
  bool _internal_has_room_info() const;
  public:
  void clear_room_info();
  const ::Protocol::RoomInfo& room_info() const;
  PROTOBUF_NODISCARD ::Protocol::RoomInfo* release_room_info();
  ::Protocol::RoomInfo* mutable_room_info();
  void set_allocated_room_info(::Protocol::RoomInfo* room_info);
  private:
  const ::Protocol::RoomInfo& _internal_room_info() const;
  ::Protocol::RoomInfo* _internal_mutable_room_info();
  public:
  void unsafe_arena_set_allocated_room_info(
      ::Protocol::RoomInfo* room_info);
  ::Protocol::RoomInfo* unsafe_arena_release_room_info();

  // @@protoc_insertion_point(class_scope:Protocol.CTS_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::RoomInfo* room_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_CREATE_ROOM) */ {
 public:
  inline STC_CREATE_ROOM() : STC_CREATE_ROOM(nullptr) {}
  ~STC_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR STC_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_CREATE_ROOM(const STC_CREATE_ROOM& from);
  STC_CREATE_ROOM(STC_CREATE_ROOM&& from) noexcept
    : STC_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline STC_CREATE_ROOM& operator=(const STC_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_CREATE_ROOM& operator=(STC_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const STC_CREATE_ROOM*>(
               &_STC_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(STC_CREATE_ROOM& a, STC_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_CREATE_ROOM& from) {
    STC_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_CREATE_ROOM";
  }
  protected:
  explicit STC_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.RoomInfo room_info = 2;
  bool has_room_info() const;
  private:
  bool _internal_has_room_info() const;
  public:
  void clear_room_info();
  const ::Protocol::RoomInfo& room_info() const;
  PROTOBUF_NODISCARD ::Protocol::RoomInfo* release_room_info();
  ::Protocol::RoomInfo* mutable_room_info();
  void set_allocated_room_info(::Protocol::RoomInfo* room_info);
  private:
  const ::Protocol::RoomInfo& _internal_room_info() const;
  ::Protocol::RoomInfo* _internal_mutable_room_info();
  public:
  void unsafe_arena_set_allocated_room_info(
      ::Protocol::RoomInfo* room_info);
  ::Protocol::RoomInfo* unsafe_arena_release_room_info();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::RoomInfo* room_info_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_JOIN_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_JOIN_ROOM) */ {
 public:
  inline CTS_JOIN_ROOM() : CTS_JOIN_ROOM(nullptr) {}
  ~CTS_JOIN_ROOM() override;
  explicit PROTOBUF_CONSTEXPR CTS_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_JOIN_ROOM(const CTS_JOIN_ROOM& from);
  CTS_JOIN_ROOM(CTS_JOIN_ROOM&& from) noexcept
    : CTS_JOIN_ROOM() {
    *this = ::std::move(from);
  }

  inline CTS_JOIN_ROOM& operator=(const CTS_JOIN_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_JOIN_ROOM& operator=(CTS_JOIN_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_JOIN_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_JOIN_ROOM* internal_default_instance() {
    return reinterpret_cast<const CTS_JOIN_ROOM*>(
               &_CTS_JOIN_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CTS_JOIN_ROOM& a, CTS_JOIN_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_JOIN_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_JOIN_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_JOIN_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_JOIN_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_JOIN_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_JOIN_ROOM& from) {
    CTS_JOIN_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_JOIN_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_JOIN_ROOM";
  }
  protected:
  explicit CTS_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kRoomIndexFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // uint64 roomIndex = 1;
  void clear_roomindex();
  uint64_t roomindex() const;
  void set_roomindex(uint64_t value);
  private:
  uint64_t _internal_roomindex() const;
  void _internal_set_roomindex(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CTS_JOIN_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    uint64_t roomindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_JOIN_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_JOIN_ROOM) */ {
 public:
  inline STC_JOIN_ROOM() : STC_JOIN_ROOM(nullptr) {}
  ~STC_JOIN_ROOM() override;
  explicit PROTOBUF_CONSTEXPR STC_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_JOIN_ROOM(const STC_JOIN_ROOM& from);
  STC_JOIN_ROOM(STC_JOIN_ROOM&& from) noexcept
    : STC_JOIN_ROOM() {
    *this = ::std::move(from);
  }

  inline STC_JOIN_ROOM& operator=(const STC_JOIN_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_JOIN_ROOM& operator=(STC_JOIN_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_JOIN_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_JOIN_ROOM* internal_default_instance() {
    return reinterpret_cast<const STC_JOIN_ROOM*>(
               &_STC_JOIN_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(STC_JOIN_ROOM& a, STC_JOIN_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_JOIN_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_JOIN_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_JOIN_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_JOIN_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_JOIN_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_JOIN_ROOM& from) {
    STC_JOIN_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_JOIN_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_JOIN_ROOM";
  }
  protected:
  explicit STC_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 3,
    kRoomIndexFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 3;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // uint64 roomIndex = 2;
  void clear_roomindex();
  uint64_t roomindex() const;
  void set_roomindex(uint64_t value);
  private:
  uint64_t _internal_roomindex() const;
  void _internal_set_roomindex(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_JOIN_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    uint64_t roomindex_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_LEAVE_ROOM) */ {
 public:
  inline CTS_LEAVE_ROOM() : CTS_LEAVE_ROOM(nullptr) {}
  ~CTS_LEAVE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR CTS_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_LEAVE_ROOM(const CTS_LEAVE_ROOM& from);
  CTS_LEAVE_ROOM(CTS_LEAVE_ROOM&& from) noexcept
    : CTS_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline CTS_LEAVE_ROOM& operator=(const CTS_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_LEAVE_ROOM& operator=(CTS_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const CTS_LEAVE_ROOM*>(
               &_CTS_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CTS_LEAVE_ROOM& a, CTS_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_LEAVE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_LEAVE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_LEAVE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_LEAVE_ROOM& from) {
    CTS_LEAVE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_LEAVE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_LEAVE_ROOM";
  }
  protected:
  explicit CTS_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CTS_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_LEAVE_ROOM) */ {
 public:
  inline STC_LEAVE_ROOM() : STC_LEAVE_ROOM(nullptr) {}
  ~STC_LEAVE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR STC_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_LEAVE_ROOM(const STC_LEAVE_ROOM& from);
  STC_LEAVE_ROOM(STC_LEAVE_ROOM&& from) noexcept
    : STC_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline STC_LEAVE_ROOM& operator=(const STC_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_LEAVE_ROOM& operator=(STC_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const STC_LEAVE_ROOM*>(
               &_STC_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(STC_LEAVE_ROOM& a, STC_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_LEAVE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_LEAVE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_LEAVE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_LEAVE_ROOM& from) {
    STC_LEAVE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_LEAVE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_LEAVE_ROOM";
  }
  protected:
  explicit STC_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_ENTER_GAME) */ {
 public:
  inline CTS_ENTER_GAME() : CTS_ENTER_GAME(nullptr) {}
  ~CTS_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR CTS_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_ENTER_GAME(const CTS_ENTER_GAME& from);
  CTS_ENTER_GAME(CTS_ENTER_GAME&& from) noexcept
    : CTS_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline CTS_ENTER_GAME& operator=(const CTS_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_ENTER_GAME& operator=(CTS_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const CTS_ENTER_GAME*>(
               &_CTS_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CTS_ENTER_GAME& a, CTS_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_ENTER_GAME& from) {
    CTS_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_ENTER_GAME";
  }
  protected:
  explicit CTS_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // uint64 playerIndex = 1;
  void clear_playerindex();
  uint64_t playerindex() const;
  void set_playerindex(uint64_t value);
  private:
  uint64_t _internal_playerindex() const;
  void _internal_set_playerindex(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CTS_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t playerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_ENTER_GAME) */ {
 public:
  inline STC_ENTER_GAME() : STC_ENTER_GAME(nullptr) {}
  ~STC_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR STC_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_ENTER_GAME(const STC_ENTER_GAME& from);
  STC_ENTER_GAME(STC_ENTER_GAME&& from) noexcept
    : STC_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline STC_ENTER_GAME& operator=(const STC_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_ENTER_GAME& operator=(STC_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const STC_ENTER_GAME*>(
               &_STC_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(STC_ENTER_GAME& a, STC_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_ENTER_GAME& from) {
    STC_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_ENTER_GAME";
  }
  protected:
  explicit STC_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ObjectInfo player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::ObjectInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_player();
  ::Protocol::ObjectInfo* mutable_player();
  void set_allocated_player(::Protocol::ObjectInfo* player);
  private:
  const ::Protocol::ObjectInfo& _internal_player() const;
  ::Protocol::ObjectInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::ObjectInfo* player);
  ::Protocol::ObjectInfo* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* player_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.CTS_LEAVE_GAME) */ {
 public:
  inline CTS_LEAVE_GAME() : CTS_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CTS_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_LEAVE_GAME(const CTS_LEAVE_GAME& from);
  CTS_LEAVE_GAME(CTS_LEAVE_GAME&& from) noexcept
    : CTS_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline CTS_LEAVE_GAME& operator=(const CTS_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_LEAVE_GAME& operator=(CTS_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const CTS_LEAVE_GAME*>(
               &_CTS_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CTS_LEAVE_GAME& a, CTS_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CTS_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CTS_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_LEAVE_GAME";
  }
  protected:
  explicit CTS_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.CTS_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.STC_LEAVE_GAME) */ {
 public:
  inline STC_LEAVE_GAME() : STC_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR STC_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_LEAVE_GAME(const STC_LEAVE_GAME& from);
  STC_LEAVE_GAME(STC_LEAVE_GAME&& from) noexcept
    : STC_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline STC_LEAVE_GAME& operator=(const STC_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_LEAVE_GAME& operator=(STC_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const STC_LEAVE_GAME*>(
               &_STC_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(STC_LEAVE_GAME& a, STC_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const STC_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const STC_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_LEAVE_GAME";
  }
  protected:
  explicit STC_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.STC_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_SPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_SPAWN) */ {
 public:
  inline STC_SPAWN() : STC_SPAWN(nullptr) {}
  ~STC_SPAWN() override;
  explicit PROTOBUF_CONSTEXPR STC_SPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_SPAWN(const STC_SPAWN& from);
  STC_SPAWN(STC_SPAWN&& from) noexcept
    : STC_SPAWN() {
    *this = ::std::move(from);
  }

  inline STC_SPAWN& operator=(const STC_SPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_SPAWN& operator=(STC_SPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_SPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_SPAWN* internal_default_instance() {
    return reinterpret_cast<const STC_SPAWN*>(
               &_STC_SPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(STC_SPAWN& a, STC_SPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_SPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_SPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_SPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_SPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_SPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_SPAWN& from) {
    STC_SPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_SPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_SPAWN";
  }
  protected:
  explicit STC_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::ObjectInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_players();
  private:
  const ::Protocol::ObjectInfo& _internal_players(int index) const;
  ::Protocol::ObjectInfo* _internal_add_players();
  public:
  const ::Protocol::ObjectInfo& players(int index) const;
  ::Protocol::ObjectInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      players() const;

  // @@protoc_insertion_point(class_scope:Protocol.STC_SPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_DESPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_DESPAWN) */ {
 public:
  inline STC_DESPAWN() : STC_DESPAWN(nullptr) {}
  ~STC_DESPAWN() override;
  explicit PROTOBUF_CONSTEXPR STC_DESPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_DESPAWN(const STC_DESPAWN& from);
  STC_DESPAWN(STC_DESPAWN&& from) noexcept
    : STC_DESPAWN() {
    *this = ::std::move(from);
  }

  inline STC_DESPAWN& operator=(const STC_DESPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_DESPAWN& operator=(STC_DESPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_DESPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_DESPAWN* internal_default_instance() {
    return reinterpret_cast<const STC_DESPAWN*>(
               &_STC_DESPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(STC_DESPAWN& a, STC_DESPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_DESPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_DESPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_DESPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_DESPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_DESPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_DESPAWN& from) {
    STC_DESPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_DESPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_DESPAWN";
  }
  protected:
  explicit STC_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
  };
  // repeated uint64 object_ids = 1;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  uint64_t _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_ids() const;
  void _internal_add_object_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_ids();
  public:
  uint64_t object_ids(int index) const;
  void set_object_ids(int index, uint64_t value);
  void add_object_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_ids();

  // @@protoc_insertion_point(class_scope:Protocol.STC_DESPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_ids_;
    mutable std::atomic<int> _object_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_MOVE) */ {
 public:
  inline CTS_MOVE() : CTS_MOVE(nullptr) {}
  ~CTS_MOVE() override;
  explicit PROTOBUF_CONSTEXPR CTS_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_MOVE(const CTS_MOVE& from);
  CTS_MOVE(CTS_MOVE&& from) noexcept
    : CTS_MOVE() {
    *this = ::std::move(from);
  }

  inline CTS_MOVE& operator=(const CTS_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_MOVE& operator=(CTS_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_MOVE* internal_default_instance() {
    return reinterpret_cast<const CTS_MOVE*>(
               &_CTS_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CTS_MOVE& a, CTS_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_MOVE& from) {
    CTS_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_MOVE";
  }
  protected:
  explicit CTS_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.PosInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::PosInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_info();
  ::Protocol::PosInfo* mutable_info();
  void set_allocated_info(::Protocol::PosInfo* info);
  private:
  const ::Protocol::PosInfo& _internal_info() const;
  ::Protocol::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::PosInfo* info);
  ::Protocol::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.CTS_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_MOVE) */ {
 public:
  inline STC_MOVE() : STC_MOVE(nullptr) {}
  ~STC_MOVE() override;
  explicit PROTOBUF_CONSTEXPR STC_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_MOVE(const STC_MOVE& from);
  STC_MOVE(STC_MOVE&& from) noexcept
    : STC_MOVE() {
    *this = ::std::move(from);
  }

  inline STC_MOVE& operator=(const STC_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_MOVE& operator=(STC_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_MOVE* internal_default_instance() {
    return reinterpret_cast<const STC_MOVE*>(
               &_STC_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(STC_MOVE& a, STC_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_MOVE& from) {
    STC_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_MOVE";
  }
  protected:
  explicit STC_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.PosInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::PosInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_info();
  ::Protocol::PosInfo* mutable_info();
  void set_allocated_info(::Protocol::PosInfo* info);
  private:
  const ::Protocol::PosInfo& _internal_info() const;
  ::Protocol::PosInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::PosInfo* info);
  ::Protocol::PosInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.STC_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CTS_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CTS_CHAT) */ {
 public:
  inline CTS_CHAT() : CTS_CHAT(nullptr) {}
  ~CTS_CHAT() override;
  explicit PROTOBUF_CONSTEXPR CTS_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTS_CHAT(const CTS_CHAT& from);
  CTS_CHAT(CTS_CHAT&& from) noexcept
    : CTS_CHAT() {
    *this = ::std::move(from);
  }

  inline CTS_CHAT& operator=(const CTS_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTS_CHAT& operator=(CTS_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTS_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTS_CHAT* internal_default_instance() {
    return reinterpret_cast<const CTS_CHAT*>(
               &_CTS_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CTS_CHAT& a, CTS_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(CTS_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTS_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTS_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTS_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTS_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CTS_CHAT& from) {
    CTS_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTS_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CTS_CHAT";
  }
  protected:
  explicit CTS_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CTS_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class STC_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.STC_CHAT) */ {
 public:
  inline STC_CHAT() : STC_CHAT(nullptr) {}
  ~STC_CHAT() override;
  explicit PROTOBUF_CONSTEXPR STC_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STC_CHAT(const STC_CHAT& from);
  STC_CHAT(STC_CHAT&& from) noexcept
    : STC_CHAT() {
    *this = ::std::move(from);
  }

  inline STC_CHAT& operator=(const STC_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline STC_CHAT& operator=(STC_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STC_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const STC_CHAT* internal_default_instance() {
    return reinterpret_cast<const STC_CHAT*>(
               &_STC_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(STC_CHAT& a, STC_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(STC_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STC_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STC_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STC_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STC_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const STC_CHAT& from) {
    STC_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STC_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.STC_CHAT";
  }
  protected:
  explicit STC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.STC_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTS_LOGIN

// string id = 1;
inline void CTS_LOGIN::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CTS_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_LOGIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTS_LOGIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CTS_LOGIN.id)
}
inline std::string* CTS_LOGIN::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_LOGIN.id)
  return _s;
}
inline const std::string& CTS_LOGIN::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CTS_LOGIN::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CTS_LOGIN::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CTS_LOGIN::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_LOGIN.id)
  return _impl_.id_.Release();
}
inline void CTS_LOGIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_LOGIN.id)
}

// string pw = 2;
inline void CTS_LOGIN::clear_pw() {
  _impl_.pw_.ClearToEmpty();
}
inline const std::string& CTS_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_LOGIN.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTS_LOGIN::set_pw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CTS_LOGIN.pw)
}
inline std::string* CTS_LOGIN::mutable_pw() {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_LOGIN.pw)
  return _s;
}
inline const std::string& CTS_LOGIN::_internal_pw() const {
  return _impl_.pw_.Get();
}
inline void CTS_LOGIN::_internal_set_pw(const std::string& value) {
  
  _impl_.pw_.Set(value, GetArenaForAllocation());
}
inline std::string* CTS_LOGIN::_internal_mutable_pw() {
  
  return _impl_.pw_.Mutable(GetArenaForAllocation());
}
inline std::string* CTS_LOGIN::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_LOGIN.pw)
  return _impl_.pw_.Release();
}
inline void CTS_LOGIN::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  _impl_.pw_.SetAllocated(pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pw_.IsDefault()) {
    _impl_.pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_LOGIN.pw)
}

// uint64 player_id = 3;
inline void CTS_LOGIN::clear_player_id() {
  _impl_.player_id_ = uint64_t{0u};
}
inline uint64_t CTS_LOGIN::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint64_t CTS_LOGIN::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_LOGIN.player_id)
  return _internal_player_id();
}
inline void CTS_LOGIN::_internal_set_player_id(uint64_t value) {
  
  _impl_.player_id_ = value;
}
inline void CTS_LOGIN::set_player_id(uint64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CTS_LOGIN.player_id)
}

// -------------------------------------------------------------------

// STC_LOGIN

// bool success = 1;
inline void STC_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool STC_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool STC_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_LOGIN.success)
  return _internal_success();
}
inline void STC_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void STC_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_LOGIN.success)
}

// .Protocol.PlayerInfo player = 2;
inline bool STC_LOGIN::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool STC_LOGIN::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& STC_LOGIN::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& STC_LOGIN::player() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_LOGIN.player)
  return _internal_player();
}
inline void STC_LOGIN::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.STC_LOGIN.player)
}
inline ::Protocol::PlayerInfo* STC_LOGIN::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* STC_LOGIN::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.STC_LOGIN.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* STC_LOGIN::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* STC_LOGIN::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_LOGIN.player)
  return _msg;
}
inline void STC_LOGIN::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_LOGIN.player)
}

// -------------------------------------------------------------------

// CTS_ENTER_LOBBY

// .Protocol.PlayerInfo player = 1;
inline bool CTS_ENTER_LOBBY::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool CTS_ENTER_LOBBY::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& CTS_ENTER_LOBBY::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& CTS_ENTER_LOBBY::player() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_ENTER_LOBBY.player)
  return _internal_player();
}
inline void CTS_ENTER_LOBBY::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CTS_ENTER_LOBBY.player)
}
inline ::Protocol::PlayerInfo* CTS_ENTER_LOBBY::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* CTS_ENTER_LOBBY::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_ENTER_LOBBY.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* CTS_ENTER_LOBBY::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* CTS_ENTER_LOBBY::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_ENTER_LOBBY.player)
  return _msg;
}
inline void CTS_ENTER_LOBBY::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_ENTER_LOBBY.player)
}

// -------------------------------------------------------------------

// STC_ENTER_LOBBY

// bool success = 1;
inline void STC_ENTER_LOBBY::clear_success() {
  _impl_.success_ = false;
}
inline bool STC_ENTER_LOBBY::_internal_success() const {
  return _impl_.success_;
}
inline bool STC_ENTER_LOBBY::success() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_ENTER_LOBBY.success)
  return _internal_success();
}
inline void STC_ENTER_LOBBY::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void STC_ENTER_LOBBY::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_ENTER_LOBBY.success)
}

// .Protocol.PlayerInfo player = 2;
inline bool STC_ENTER_LOBBY::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool STC_ENTER_LOBBY::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& STC_ENTER_LOBBY::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& STC_ENTER_LOBBY::player() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_ENTER_LOBBY.player)
  return _internal_player();
}
inline void STC_ENTER_LOBBY::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.STC_ENTER_LOBBY.player)
}
inline ::Protocol::PlayerInfo* STC_ENTER_LOBBY::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* STC_ENTER_LOBBY::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.STC_ENTER_LOBBY.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* STC_ENTER_LOBBY::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* STC_ENTER_LOBBY::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_ENTER_LOBBY.player)
  return _msg;
}
inline void STC_ENTER_LOBBY::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_ENTER_LOBBY.player)
}

// repeated .Protocol.RoomInfo rooms = 3;
inline int STC_ENTER_LOBBY::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int STC_ENTER_LOBBY::rooms_size() const {
  return _internal_rooms_size();
}
inline ::Protocol::RoomInfo* STC_ENTER_LOBBY::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.STC_ENTER_LOBBY.rooms)
  return _impl_.rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >*
STC_ENTER_LOBBY::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.STC_ENTER_LOBBY.rooms)
  return &_impl_.rooms_;
}
inline const ::Protocol::RoomInfo& STC_ENTER_LOBBY::_internal_rooms(int index) const {
  return _impl_.rooms_.Get(index);
}
inline const ::Protocol::RoomInfo& STC_ENTER_LOBBY::rooms(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.STC_ENTER_LOBBY.rooms)
  return _internal_rooms(index);
}
inline ::Protocol::RoomInfo* STC_ENTER_LOBBY::_internal_add_rooms() {
  return _impl_.rooms_.Add();
}
inline ::Protocol::RoomInfo* STC_ENTER_LOBBY::add_rooms() {
  ::Protocol::RoomInfo* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:Protocol.STC_ENTER_LOBBY.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::RoomInfo >&
STC_ENTER_LOBBY::rooms() const {
  // @@protoc_insertion_point(field_list:Protocol.STC_ENTER_LOBBY.rooms)
  return _impl_.rooms_;
}

// -------------------------------------------------------------------

// CTS_CREATE_ROOM

// .Protocol.RoomInfo room_info = 1;
inline bool CTS_CREATE_ROOM::_internal_has_room_info() const {
  return this != internal_default_instance() && _impl_.room_info_ != nullptr;
}
inline bool CTS_CREATE_ROOM::has_room_info() const {
  return _internal_has_room_info();
}
inline const ::Protocol::RoomInfo& CTS_CREATE_ROOM::_internal_room_info() const {
  const ::Protocol::RoomInfo* p = _impl_.room_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& CTS_CREATE_ROOM::room_info() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_CREATE_ROOM.room_info)
  return _internal_room_info();
}
inline void CTS_CREATE_ROOM::unsafe_arena_set_allocated_room_info(
    ::Protocol::RoomInfo* room_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_info_);
  }
  _impl_.room_info_ = room_info;
  if (room_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CTS_CREATE_ROOM.room_info)
}
inline ::Protocol::RoomInfo* CTS_CREATE_ROOM::release_room_info() {
  
  ::Protocol::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::RoomInfo* CTS_CREATE_ROOM::unsafe_arena_release_room_info() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_CREATE_ROOM.room_info)
  
  ::Protocol::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* CTS_CREATE_ROOM::_internal_mutable_room_info() {
  
  if (_impl_.room_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    _impl_.room_info_ = p;
  }
  return _impl_.room_info_;
}
inline ::Protocol::RoomInfo* CTS_CREATE_ROOM::mutable_room_info() {
  ::Protocol::RoomInfo* _msg = _internal_mutable_room_info();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_CREATE_ROOM.room_info)
  return _msg;
}
inline void CTS_CREATE_ROOM::set_allocated_room_info(::Protocol::RoomInfo* room_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_info_);
  }
  if (room_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_info));
    if (message_arena != submessage_arena) {
      room_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_info_ = room_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_CREATE_ROOM.room_info)
}

// -------------------------------------------------------------------

// STC_CREATE_ROOM

// bool success = 1;
inline void STC_CREATE_ROOM::clear_success() {
  _impl_.success_ = false;
}
inline bool STC_CREATE_ROOM::_internal_success() const {
  return _impl_.success_;
}
inline bool STC_CREATE_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_CREATE_ROOM.success)
  return _internal_success();
}
inline void STC_CREATE_ROOM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void STC_CREATE_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_CREATE_ROOM.success)
}

// .Protocol.RoomInfo room_info = 2;
inline bool STC_CREATE_ROOM::_internal_has_room_info() const {
  return this != internal_default_instance() && _impl_.room_info_ != nullptr;
}
inline bool STC_CREATE_ROOM::has_room_info() const {
  return _internal_has_room_info();
}
inline const ::Protocol::RoomInfo& STC_CREATE_ROOM::_internal_room_info() const {
  const ::Protocol::RoomInfo* p = _impl_.room_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& STC_CREATE_ROOM::room_info() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_CREATE_ROOM.room_info)
  return _internal_room_info();
}
inline void STC_CREATE_ROOM::unsafe_arena_set_allocated_room_info(
    ::Protocol::RoomInfo* room_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_info_);
  }
  _impl_.room_info_ = room_info;
  if (room_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.STC_CREATE_ROOM.room_info)
}
inline ::Protocol::RoomInfo* STC_CREATE_ROOM::release_room_info() {
  
  ::Protocol::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::RoomInfo* STC_CREATE_ROOM::unsafe_arena_release_room_info() {
  // @@protoc_insertion_point(field_release:Protocol.STC_CREATE_ROOM.room_info)
  
  ::Protocol::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* STC_CREATE_ROOM::_internal_mutable_room_info() {
  
  if (_impl_.room_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    _impl_.room_info_ = p;
  }
  return _impl_.room_info_;
}
inline ::Protocol::RoomInfo* STC_CREATE_ROOM::mutable_room_info() {
  ::Protocol::RoomInfo* _msg = _internal_mutable_room_info();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_CREATE_ROOM.room_info)
  return _msg;
}
inline void STC_CREATE_ROOM::set_allocated_room_info(::Protocol::RoomInfo* room_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_info_);
  }
  if (room_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_info));
    if (message_arena != submessage_arena) {
      room_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_info_ = room_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_CREATE_ROOM.room_info)
}

// -------------------------------------------------------------------

// CTS_JOIN_ROOM

// uint64 roomIndex = 1;
inline void CTS_JOIN_ROOM::clear_roomindex() {
  _impl_.roomindex_ = uint64_t{0u};
}
inline uint64_t CTS_JOIN_ROOM::_internal_roomindex() const {
  return _impl_.roomindex_;
}
inline uint64_t CTS_JOIN_ROOM::roomindex() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_JOIN_ROOM.roomIndex)
  return _internal_roomindex();
}
inline void CTS_JOIN_ROOM::_internal_set_roomindex(uint64_t value) {
  
  _impl_.roomindex_ = value;
}
inline void CTS_JOIN_ROOM::set_roomindex(uint64_t value) {
  _internal_set_roomindex(value);
  // @@protoc_insertion_point(field_set:Protocol.CTS_JOIN_ROOM.roomIndex)
}

// .Protocol.PlayerInfo player = 2;
inline bool CTS_JOIN_ROOM::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool CTS_JOIN_ROOM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& CTS_JOIN_ROOM::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& CTS_JOIN_ROOM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_JOIN_ROOM.player)
  return _internal_player();
}
inline void CTS_JOIN_ROOM::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CTS_JOIN_ROOM.player)
}
inline ::Protocol::PlayerInfo* CTS_JOIN_ROOM::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* CTS_JOIN_ROOM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_JOIN_ROOM.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* CTS_JOIN_ROOM::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* CTS_JOIN_ROOM::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_JOIN_ROOM.player)
  return _msg;
}
inline void CTS_JOIN_ROOM::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_JOIN_ROOM.player)
}

// -------------------------------------------------------------------

// STC_JOIN_ROOM

// bool success = 1;
inline void STC_JOIN_ROOM::clear_success() {
  _impl_.success_ = false;
}
inline bool STC_JOIN_ROOM::_internal_success() const {
  return _impl_.success_;
}
inline bool STC_JOIN_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_JOIN_ROOM.success)
  return _internal_success();
}
inline void STC_JOIN_ROOM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void STC_JOIN_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_JOIN_ROOM.success)
}

// uint64 roomIndex = 2;
inline void STC_JOIN_ROOM::clear_roomindex() {
  _impl_.roomindex_ = uint64_t{0u};
}
inline uint64_t STC_JOIN_ROOM::_internal_roomindex() const {
  return _impl_.roomindex_;
}
inline uint64_t STC_JOIN_ROOM::roomindex() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_JOIN_ROOM.roomIndex)
  return _internal_roomindex();
}
inline void STC_JOIN_ROOM::_internal_set_roomindex(uint64_t value) {
  
  _impl_.roomindex_ = value;
}
inline void STC_JOIN_ROOM::set_roomindex(uint64_t value) {
  _internal_set_roomindex(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_JOIN_ROOM.roomIndex)
}

// .Protocol.PlayerInfo player = 3;
inline bool STC_JOIN_ROOM::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool STC_JOIN_ROOM::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& STC_JOIN_ROOM::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& STC_JOIN_ROOM::player() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_JOIN_ROOM.player)
  return _internal_player();
}
inline void STC_JOIN_ROOM::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.STC_JOIN_ROOM.player)
}
inline ::Protocol::PlayerInfo* STC_JOIN_ROOM::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* STC_JOIN_ROOM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.STC_JOIN_ROOM.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* STC_JOIN_ROOM::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* STC_JOIN_ROOM::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_JOIN_ROOM.player)
  return _msg;
}
inline void STC_JOIN_ROOM::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_JOIN_ROOM.player)
}

// -------------------------------------------------------------------

// CTS_LEAVE_ROOM

// bool success = 1;
inline void CTS_LEAVE_ROOM::clear_success() {
  _impl_.success_ = false;
}
inline bool CTS_LEAVE_ROOM::_internal_success() const {
  return _impl_.success_;
}
inline bool CTS_LEAVE_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_LEAVE_ROOM.success)
  return _internal_success();
}
inline void CTS_LEAVE_ROOM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CTS_LEAVE_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.CTS_LEAVE_ROOM.success)
}

// -------------------------------------------------------------------

// STC_LEAVE_ROOM

// bool success = 1;
inline void STC_LEAVE_ROOM::clear_success() {
  _impl_.success_ = false;
}
inline bool STC_LEAVE_ROOM::_internal_success() const {
  return _impl_.success_;
}
inline bool STC_LEAVE_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_LEAVE_ROOM.success)
  return _internal_success();
}
inline void STC_LEAVE_ROOM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void STC_LEAVE_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_LEAVE_ROOM.success)
}

// -------------------------------------------------------------------

// CTS_ENTER_GAME

// uint64 playerIndex = 1;
inline void CTS_ENTER_GAME::clear_playerindex() {
  _impl_.playerindex_ = uint64_t{0u};
}
inline uint64_t CTS_ENTER_GAME::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline uint64_t CTS_ENTER_GAME::playerindex() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_ENTER_GAME.playerIndex)
  return _internal_playerindex();
}
inline void CTS_ENTER_GAME::_internal_set_playerindex(uint64_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CTS_ENTER_GAME::set_playerindex(uint64_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:Protocol.CTS_ENTER_GAME.playerIndex)
}

// -------------------------------------------------------------------

// STC_ENTER_GAME

// bool success = 1;
inline void STC_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool STC_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool STC_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_ENTER_GAME.success)
  return _internal_success();
}
inline void STC_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void STC_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_ENTER_GAME.success)
}

// .Protocol.ObjectInfo player = 2;
inline bool STC_ENTER_GAME::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool STC_ENTER_GAME::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::ObjectInfo& STC_ENTER_GAME::_internal_player() const {
  const ::Protocol::ObjectInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& STC_ENTER_GAME::player() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_ENTER_GAME.player)
  return _internal_player();
}
inline void STC_ENTER_GAME::unsafe_arena_set_allocated_player(
    ::Protocol::ObjectInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.STC_ENTER_GAME.player)
}
inline ::Protocol::ObjectInfo* STC_ENTER_GAME::release_player() {
  
  ::Protocol::ObjectInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* STC_ENTER_GAME::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.STC_ENTER_GAME.player)
  
  ::Protocol::ObjectInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* STC_ENTER_GAME::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::ObjectInfo* STC_ENTER_GAME::mutable_player() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_ENTER_GAME.player)
  return _msg;
}
inline void STC_ENTER_GAME::set_allocated_player(::Protocol::ObjectInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_ENTER_GAME.player)
}

// -------------------------------------------------------------------

// CTS_LEAVE_GAME

// -------------------------------------------------------------------

// STC_LEAVE_GAME

// -------------------------------------------------------------------

// STC_SPAWN

// repeated .Protocol.ObjectInfo players = 1;
inline int STC_SPAWN::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int STC_SPAWN::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::ObjectInfo* STC_SPAWN::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.STC_SPAWN.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
STC_SPAWN::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.STC_SPAWN.players)
  return &_impl_.players_;
}
inline const ::Protocol::ObjectInfo& STC_SPAWN::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::ObjectInfo& STC_SPAWN::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.STC_SPAWN.players)
  return _internal_players(index);
}
inline ::Protocol::ObjectInfo* STC_SPAWN::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::ObjectInfo* STC_SPAWN::add_players() {
  ::Protocol::ObjectInfo* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.STC_SPAWN.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
STC_SPAWN::players() const {
  // @@protoc_insertion_point(field_list:Protocol.STC_SPAWN.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// STC_DESPAWN

// repeated uint64 object_ids = 1;
inline int STC_DESPAWN::_internal_object_ids_size() const {
  return _impl_.object_ids_.size();
}
inline int STC_DESPAWN::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void STC_DESPAWN::clear_object_ids() {
  _impl_.object_ids_.Clear();
}
inline uint64_t STC_DESPAWN::_internal_object_ids(int index) const {
  return _impl_.object_ids_.Get(index);
}
inline uint64_t STC_DESPAWN::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.STC_DESPAWN.object_ids)
  return _internal_object_ids(index);
}
inline void STC_DESPAWN::set_object_ids(int index, uint64_t value) {
  _impl_.object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.STC_DESPAWN.object_ids)
}
inline void STC_DESPAWN::_internal_add_object_ids(uint64_t value) {
  _impl_.object_ids_.Add(value);
}
inline void STC_DESPAWN::add_object_ids(uint64_t value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:Protocol.STC_DESPAWN.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
STC_DESPAWN::_internal_object_ids() const {
  return _impl_.object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
STC_DESPAWN::object_ids() const {
  // @@protoc_insertion_point(field_list:Protocol.STC_DESPAWN.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
STC_DESPAWN::_internal_mutable_object_ids() {
  return &_impl_.object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
STC_DESPAWN::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.STC_DESPAWN.object_ids)
  return _internal_mutable_object_ids();
}

// -------------------------------------------------------------------

// CTS_MOVE

// .Protocol.PosInfo info = 1;
inline bool CTS_MOVE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool CTS_MOVE::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::PosInfo& CTS_MOVE::_internal_info() const {
  const ::Protocol::PosInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& CTS_MOVE::info() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_MOVE.info)
  return _internal_info();
}
inline void CTS_MOVE::unsafe_arena_set_allocated_info(
    ::Protocol::PosInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.CTS_MOVE.info)
}
inline ::Protocol::PosInfo* CTS_MOVE::release_info() {
  
  ::Protocol::PosInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* CTS_MOVE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_MOVE.info)
  
  ::Protocol::PosInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* CTS_MOVE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::PosInfo* CTS_MOVE::mutable_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_MOVE.info)
  return _msg;
}
inline void CTS_MOVE::set_allocated_info(::Protocol::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_MOVE.info)
}

// -------------------------------------------------------------------

// STC_MOVE

// .Protocol.PosInfo info = 1;
inline bool STC_MOVE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool STC_MOVE::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::PosInfo& STC_MOVE::_internal_info() const {
  const ::Protocol::PosInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& STC_MOVE::info() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_MOVE.info)
  return _internal_info();
}
inline void STC_MOVE::unsafe_arena_set_allocated_info(
    ::Protocol::PosInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.STC_MOVE.info)
}
inline ::Protocol::PosInfo* STC_MOVE::release_info() {
  
  ::Protocol::PosInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* STC_MOVE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.STC_MOVE.info)
  
  ::Protocol::PosInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* STC_MOVE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::PosInfo* STC_MOVE::mutable_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_MOVE.info)
  return _msg;
}
inline void STC_MOVE::set_allocated_info(::Protocol::PosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_MOVE.info)
}

// -------------------------------------------------------------------

// CTS_CHAT

// string msg = 1;
inline void CTS_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& CTS_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.CTS_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CTS_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CTS_CHAT.msg)
}
inline std::string* CTS_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.CTS_CHAT.msg)
  return _s;
}
inline const std::string& CTS_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void CTS_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* CTS_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* CTS_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.CTS_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void CTS_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CTS_CHAT.msg)
}

// -------------------------------------------------------------------

// STC_CHAT

// uint64 playerId = 1;
inline void STC_CHAT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t STC_CHAT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t STC_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_CHAT.playerId)
  return _internal_playerid();
}
inline void STC_CHAT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void STC_CHAT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.STC_CHAT.playerId)
}

// string msg = 2;
inline void STC_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& STC_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.STC_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void STC_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.STC_CHAT.msg)
}
inline std::string* STC_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.STC_CHAT.msg)
  return _s;
}
inline const std::string& STC_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void STC_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* STC_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* STC_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.STC_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void STC_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.STC_CHAT.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
